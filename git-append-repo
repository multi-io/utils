#!/bin/bash

# in repo R# git-append-subdir-repo S foo
# # where S is a repository (remote or local), and foo is a (not yet existing) subdirectory of the current directory,
# #  which must be located in the working directory of a repository (let's call that repository R)
# =>
# say R's commit history was R1--R2--R3--R4 and S's was S1--S2--S3, then after the command completes, R will have history R1--R2--R3--R4--S1'--S2'--S3'
# where any Sx' will be identical to Sx except that any path a/b/c in Sx will be foo/a/b/c in Sx'

set -e

git status >/dev/null  # make sure we're in a git repo

repo="$1"
subdir="$2"
repobranch="${3:-master}"

if [ -z "$repo" -o -z "$subdir" -o ! -d "$repo/.git" -o -e "$subdir" ]; then
    echo "usage: $0 <git repo> <subdir>" >&2
    exit 1
fi

remote=repo$$

git remote add $remote $repo
git fetch $remote $repobranch

git rev-list --reverse $remote/$repobranch | while read commit; do
    echo "processing commit $commit" >&2;

    rm -rf "$subdir"
    mkdir -p "$subdir"

    git ls-tree -r --full-name --full-tree $commit | while read line; do

        read mode type id path <<<$line;  # TODO unescape \t, \n, and \\ in path (see git ls-tree --help)

        echo "got: line=$line params=$_params path=$path mode=$mode type=$type id=$id" >&2;
    done
done
