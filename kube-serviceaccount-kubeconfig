#!/usr/bin/env bash

set -e

namespace="$1"
account_name="$2"
output="$3"

if [[ -z "$namespace" || -z "$account_name" ]]; then
    echo "usage: $0 <namespace> <serviceaccount name> [<kubeconfig file>]" >&2
    echo "extracts kubeconfig for accessing the cluster using the <namespace>/<serviceaccount>, writes it to <kubeconfig file> (default ~/.kube/config-<namespace>-<serviceaccount>)" >&2
    exit 1
fi

if [[ -z "$output" ]]; then
    output="$HOME/.kube/config-${namespace}-${account_name}"
fi

echo "writing to $output" >&2

secret_name="$(kubectl --namespace=${namespace} get serviceaccount ${account_name} -o json | jq '.secrets[0].name' -r)"

# TODO rather than always taking cluster[0], navigate to active cluster via current-context->cluster
endpoint=$(kubectl config view -o json | jq -r '.clusters[0].cluster.server')

# apparently kubectl config needs the ca cert to reside in a regular file; kubectl config ... --certificate-authority=<(kubectl get secret ... | ...) will fail silently
ca="$(mktemp)"
trap "rm -f $ca" EXIT
kubectl --namespace=${namespace} get secret "${secret_name}" -o json | jq '.data."ca.crt"' -r | base64 --decode >"$ca"
kubectl --kubeconfig="${output}" config set-cluster "thecluster" --server="${endpoint}" --certificate-authority="$ca"  --embed-certs=true

kubectl --kubeconfig="${output}" config set-credentials "theuser" "--token=$(kubectl --namespace=${namespace} get secret "${secret_name}" -o json | jq '.data."token"' -r | base64 --decode)"

kubectl --kubeconfig="${output}" config set-context "thecontext" --user="theuser" --cluster="thecluster"

kubectl --kubeconfig="${output}" config use-context "thecontext"

echo "DONE" >&2
