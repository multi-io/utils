#!/usr/bin/perl -w
#
# input: - audio CD in /dev/cdrom, (optional) internet connection freedb.freedb.org
#        - (optional) command line: -encoders=encoder1[,encoder2,...]
#                                       encoders to use
#                                       default: -encoders=ogg,mp3
#                                       existing encoders: ogg, mp3, wav
#                                   -start=num -stop=num
#                                       first and last track to encode (numbers 1-based)
#                                       default: entire CD
#
# output: ripped files, named "<artist>--<title>.<wav|ogg|mp3>"

package Encoders;


{
    use File::Temp qw/ tempfile tempdir /;

    #my ($fh, $tmpfile) = tempfile( DIR => tempdir( CLEANUP => 1 ) );
    my ($fh, $tmpfile) = tempfile();
    $tmpfile .= '.wav';

    ##private
    sub mysystem {
        my $cmdstr = join ' ', (map {"'$_'"} @_);
        print "cdda-cddbrip: running: $cmdstr\n";
        system(@_) and die "couldn't execute: $cmdstr: $!";
    }


    ## private
    sub tofilename {
        my ($artist, $title) = @_;
        my $fn = ($artist?"${artist}--":"") . $title;
        $fn =~ s![/ ,;:\'\"]!_!g;
        $fn;
    }


    my $ripped_wav;  # cache for rip_wav

    ## private
    # rip($num) -- rip track $num to wav file, return filename
    sub rip_wav {
        my ($num) = @_;
        return $tmpfile if ($num eq $ripped_wav);
        $ripped_wav = $num;
        mysystem("cdparanoia --output-wav $num $tmpfile");

        $tmpfile;
    }


    sub encode_wav {
        my ($num,$artist,$title,$album) = @_;
        my $wavfile = rip_wav($num);
        my $fn = tofilename($artist, $title);
        mysystem ("cp", "-f", $wavfile, "${fn}.wav");
    }


    sub encode_mp3 {
        my ($num,$artist,$title,$album) = @_;
        my $wavfile = rip_wav($num);
        my $fn = tofilename($artist, $title);
        mysystem ( qw/lame -h -b 192/,
                   '--tt', $title,
                   ($artist? ('--ta',$artist): ()),
                   ($album? ('--tl',$album): ()),
                   $wavfile,
                   "${fn}.mp3" );
    }


    sub encode_ogg {
        my ($num,$artist,$title,$album) = @_;
        my $wavfile = rip_wav($num);
        my $fn = tofilename($artist, $title);
        mysystem ( qw/oggenc -b 160/,
                   '-t', $title,
                   ($artist? ('-a',$artist): ()),
                   ($album? ('-l',$album): ()),
                   "-o", "${fn}.ogg",
                   $wavfile );
    }



    sub encode_echo {
        my ($num,$artist,$title,$album) = @_;
        print "encode_echo: ", join ' ', (map {"'$_'"} (@_, tofilename($artist, $title))), "\n";
    }


    sub cleanup {
        mysystem("rm","-f",$tmpfile);
    }
}



# main prg

package main;

use strict;
no strict 'refs';
use Getopt::Long;

my (@encoders, $start, $stop);

$start=1; $stop=100000;
exit(1) unless GetOptions ("encoders=s"  => \@encoders,
                           "start=s" => \$start,
                           "stop=s" => \$stop);

@encoders = qw/mp3 ogg/ unless (@encoders);  # default

print "start: $start, stop: $stop, encoders: ",join(',',@encoders),"\n";

@encoders = map {"Encoders::encode_${_}"} @encoders;

foreach (@encoders) {
    die "undefined encoder: $_" unless defined *{$_}{CODE};
}



use CDDB_get qw( get_cddb );

my %config;

# following variables just need to be declared if different from defaults

#$config{CDDB_HOST}="freedb.freedb.org";        # set cddb host
#$config{CDDB_PORT}=8880;                       # set cddb port
#$config{CDDB_MODE}="cddb";                     # set cddb mode: cddb or http
#$config{CD_DEVICE}="/dev/cdrom";               # set cd device

# user interaction welcome?

$config{input}=1;  # 1: ask user if more than one possibility
                  # 0: no user interaction

# get it on

my %cd=get_cddb(\%config);

my $cdalbum = $cd{title};
my $cdartist = $cd{artist} unless ($cd{artist} =~ /^various/i);

# precaution against some buggy cddb entries...
{
    local $/="\r";
    chomp($cdalbum); chomp($cdartist);
    $/="\n";
    chomp($cdalbum); chomp($cdartist);
}

my $n=1;
foreach (@{$cd{track}}) {
    next if ($n<$start);
    last if ($n>$stop);
    my ($artist, $title) = $cdartist? ($cdartist, $_) :
                                      (m!\s*(.*?)\s*/\s*(.*)\s*!? ($1,$2) : (undef, $_));
    foreach my $enc (@encoders) {
        $enc->($n, $artist, $title, $cdalbum);
    }
}
continue {
    $n++;
}

# TODO: finally
Encoders::cleanup();
